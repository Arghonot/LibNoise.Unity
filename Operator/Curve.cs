using System.Collections.Generic;
using UnityEngine;
using System;

namespace LibNoise.Operator
{
    /// <summary>
    /// Provides a noise module that maps the output value from a source module onto an
    /// arbitrary function curve. [OPERATOR]
    /// </summary>
    public class Curve : SerializableModuleBase
    {
        #region Fields
        private Shader _sphericalGPUShader = Shader.Find("Xnoise/Modifiers/Curve");
        private Material _materialGPU;

        private Texture2D curve;
        public AnimationCurve mathematicalCurve;

        private readonly List<KeyValuePair<double, double>> _data = new List<KeyValuePair<double, double>>();

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of Curve.
        /// </summary>
        public Curve()
            : base(1)
        {
        }

        /// <summary>
        /// Initializes a new instance of Curve.
        /// </summary>
        /// <param name="input">The input module.</param>
        public Curve(SerializableModuleBase input)
            : base(1)
        {
            Modules[0] = input;
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the number of control points.
        /// </summary>
        public int ControlPointCount
        {
            get { return _data.Count; }
        }

        /// <summary>
        /// Gets the list of control points.
        /// </summary>
        public List<KeyValuePair<double, double>> ControlPoints
        {
            get { return _data; }
        }

        #endregion

        #region Methods

        public void SetCurve(Texture2D newcurve)
        {
            curve = newcurve;
        }

        /// <summary>
        /// Adds a control point to the curve.
        /// </summary>
        /// <param name="input">The curves input value.</param>
        /// <param name="output">The curves output value.</param>
        public void Add(double input, double output)
        {
            var kvp = new KeyValuePair<double, double>(input, output);
            if (!_data.Contains(kvp))
            {
                _data.Add(kvp);
            }
            _data.Sort(
                delegate(KeyValuePair<double, double> lhs, KeyValuePair<double, double> rhs)
                {
                    return lhs.Key.CompareTo(rhs.Key);
                });
        }

        /// <summary>
        /// Clears the control points.
        /// </summary>
        public void Clear()
        {
            _data.Clear();
        }

        #endregion

        #region ModuleBase Members

        /// <summary>
        /// Render this generator using a spherical shader.
        /// </summary>
        /// <param name="size">The size of the final image generated by this generator.</param>
        /// <returns>The generated image.</returns>
        public override RenderTexture GetSphericalValueGPU(Vector2 size)
        {
            RenderTexture src = Modules[0].GetSphericalValueGPU(size);
            Texture2D crv = curve;

            _materialGPU = new Material(_sphericalGPUShader);
            src.wrapMode = TextureWrapMode.Clamp;
            src.filterMode = FilterMode.Point;
            crv.wrapMode = TextureWrapMode.Clamp;
            crv.filterMode = FilterMode.Point;
            crv.Apply();

            _materialGPU.SetTexture("_MainTex", src);
            _materialGPU.SetTexture("_Curve", crv);

            return GetImage(_materialGPU, size);
        }


        /// <summary>
        /// Returns the output value for the given input coordinates.
        /// </summary>
        /// <param name="x">The input coordinate on the x-axis.</param>
        /// <param name="y">The input coordinate on the y-axis.</param>
        /// <param name="z">The input coordinate on the z-axis.</param>
        /// <returns>The resulting output value.</returns>
        public override double GetValue(double x, double y, double z)
        {
            double val = Modules[0].GetValue(x, y, z);

            return mathematicalCurve.Evaluate((float)val);
        }

        #endregion
    }
}