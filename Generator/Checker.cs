using System;
using UnityEngine;

namespace LibNoise.Generator
{
    /// <summary>
    /// Provides a noise module that outputs a checkerboard pattern. [GENERATOR]
    /// </summary>
    public class Checker : SerializableModuleBase
    {

        private Shader _sphericalGPUShader = Shader.Find("Xnoise/Generators/SphericalChecker");
        private Material _materialGPU;

        #region Constructors

        /// <summary>
        /// Initializes a new instance of Checker.
        /// </summary>
        public Checker()
            : base(0)
        {
        }

        #endregion

        #region ModuleBase Members

        /// <summary>
        /// Render this generator using a spherical shader.
        /// </summary>
        /// <param name="size">The size of the final image generated by this generator.</param>
        /// <returns>The generated image.</returns>
        /// <param name="area"></param><param name="origin"></param>
        /// <param name="projection"></param>
        public override RenderTexture GetValueGPU(Vector2 size, RenderingAreaData area, Vector3 origin, ProjectionType projection = ProjectionType.Flat)
        {
            _materialGPU = new Material(_sphericalGPUShader);

            _materialGPU.SetFloat("_Radius", 1f);
            _materialGPU.SetVector("_OffsetPosition", origin);

            return GetImage(_materialGPU, size);
        }

        /// <summary>
        /// Returns the output value for the given input coordinates.
        /// </summary>
        /// <param name="x">The input coordinate on the x-axis.</param>
        /// <param name="y">The input coordinate on the y-axis.</param>
        /// <param name="z">The input coordinate on the z-axis.</param>
        /// <returns>The resulting output value.</returns>
        public override double GetValueCPU(double x, double y, double z)
        {
            var ix = (int) (Math.Floor(Utils.MakeInt32Range(x)));
            var iy = (int) (Math.Floor(Utils.MakeInt32Range(y)));
            var iz = (int) (Math.Floor(Utils.MakeInt32Range(z)));
            return (ix & 1 ^ iy & 1 ^ iz & 1) != 0 ? -1.0 : 1.0;
        }

        #endregion
    }
}